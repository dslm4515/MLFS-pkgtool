#! /bin/bash

# GCC 
# v7.00
# Run in chroot
#
# syntax *.build <package.tar.xz> <number of make jobs>
# $BUILD  = Directory to temporarily install
# $PKGS   = Directory to store built packages
# $MJ     = number of make jobs like -j3 for 3
# $SUFFIX = package file extenstion, i.e. i686-mlfs.txz 
# $DESCS  = Directory of package descriptions

# Load pkg build system configuration                          ##
source /sources/scripts/0-build.config                         &&
# Extract package info                                         ##
export PACKAGE=$(echo "$1" | cut -d "." -f -3 )                &&
#export PACKAGENAME="packagename  "                            &&
export PACKAGENAME=$(echo "$1" | cut -d "." -f -3 | cut -d "-" -f -1 ) &&
export PVER=$(echo "$1" | cut -d "." -f -3 | cut -d "-" -f 2 ) &&
cd $PACKAGE                                                    &&
#################################################################

case $(uname -m) in
	x86_64) export TRUPLE="x86_64-linux-musl"
		;;
	i686)   export TRUPLE="i686-linux-musl"
		;;
	armv7*) export TRUPLE="armv7l-linux-musleabihf"
		;;
	armv6*) export TRUPLE="armv6l-linux-musleabihf"
		;;
	aarch64) export TRUPLE="aarch64-linux-musleabihf"
	         export EXTRA_CONFIG=" --with-arch=armv8-a --with-abi=lp64"
		 ;;
esac &&
tar -xf ../isl-0.19.tar.xz &&
mv -v isl-0.19 isl         &&
for p in 0001-posix_memalign.patch 0002-gcc-poison-system-directories.patch 0003-Turn-on-Wl-z-relro-z-now-by-default.patch 0004-Turn-on-D_FORTIFY_SOURCE-2-by-default-for-C-C-ObjC-O.patch 0005-On-linux-targets-pass-as-needed-by-default-to-the-li.patch 0006-Enable-Wformat-and-Wformat-security-by-default.patch 0007-Enable-Wtrampolines-by-default.patch 0008-Disable-ssp-on-nostdlib-nodefaultlibs-and-ffreestand.patch 0009-Ensure-that-msgfmt-doesn-t-encounter-problems-during.patch 0010-Don-t-declare-asprintf-if-defined-as-a-macro.patch 0011-libiberty-copy-PIC-objects-during-build-process.patch 0012-libitm-disable-FORTIFY.patch 0013-libgcc_s.patch 0014-nopie.patch 0015-libffi-use-__linux__-instead-of-__gnu_linux__-for-mu.patch 0016-dlang-update-zlib-binding.patch 0017-dlang-fix-fcntl-on-mips-add-libucontext-dep.patch 0018-ada-fix-shared-linking.patch 0019-build-fix-CXXFLAGS_FOR_BUILD-passing.patch 0020-libstdc-futex-add-time64-compatibility.patch 0021-add-fortify-headers-paths.patch 0022-Alpine-musl-package-provides-libssp_nonshared.a.-We-.patch 0023-DP-Use-push-state-pop-state-for-gold-as-well-when-li.patch 0024-Pure-64-bit-MIPS.patch 0025-use-pure-64-bit-configuration-where-appropriate.patch 0026-always-build-libgcc_eh.a.patch 0027-ada-libgnarl-compatibility-for-musl.patch 0028-ada-musl-support-fixes.patch; do
	patch -Np1 -i ../patches/gcc-10.2.0-alpine/$p
done  &&
patch -Np0 -i ../patches/gcc-9.1.0-void/fix-musl-execinfo.patch &&
case $(uname -m) in
	x86_64)  sed -e '/m64=/s/lib64/lib/' \
	             -i.orig gcc/config/i386/t-linux64
		 ;;
	aarch64) sed -e '/mabi.lp64=/s/lib64/lib/' \
		     -i.orig gcc/config/aarch64/t-aarch64-linux
	         ;;
esac &&
sed -i "/ac_cpp=/s/\$CPPFLAGS/\$CPPFLAGS -O2/" {gcc,libiberty}/configure &&
mkdir -v build && cd build &&
SED=sed  libat_cv_have_ifunc=no       \
../configure --prefix=/usr            \
             --build="${TRUPLE}"\
             --with-system-zlib       \
             --with-isl \
             --with-linker-hash-style=gnu \
             --enable-languages=c,c++ \
             --enable-threads=posix \
             --enable-clocale=generic \
             --enable-languages=c,c++ \
             --enable-tls \
             --enable-libstdcxx-time \
             --enable-fully-dynamic-string \
             --enable-default-pie \
             --enable-default-ssp \
             --enable-vtable-verify \
             --enable-linker-build-id \
             --enable-fast-character \
             --disable-libstdcxx-pch \
             --disable-nls \
             --disable-multilib       \
             --disable-bootstrap      \
             --disable-symvers \
             --disable-libsanitizer \
             --disable-target-libiberty \
             --disable-libunwind-exceptions \
             --disable-libssp \
	     --disable-libmpx \
	     --disable-libmudflap $EXTRA_CONFIG &&
make $MJ                        &&
make DESTDIR=${BUILD} install   &&
cc -fpie ../../files/musl/getent.c -o getent    &&
cc -fpie ../../files/musl/getconf.c -o getconf  &&
cc -fpie ../../files/musl/iconv.c -o iconv      &&
mkdir -pv ${BUILD}/usr/bin                     &&
mkdir -pv ${BUILD}/lib                         &&
mkdir -pv ${BUILD}/usr/share/man/man1          &&
cp -v getent  ${BUILD}/usr/bin/                &&
cp -v getconf ${BUILD}/usr/bin/                &&
cp -v iconv   ${BUILD}/usr/bin/                &&
cp -v ../../files/musl/getent.1   ${BUILD}/usr/share/man/man1/ &&
cp -v ../../files/musl/getconf.1  ${BUILD}/usr/share/man/man1/ &&

#strip
find ${BUILD} | xargs file | grep -e "executable" -e "shared object" \
	  | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null &&

cd ${BUILD} && mkdir -v ${BUILD}/install   &&
cp -v ${DESCS}/${PACKAGENAME} install/slack-desc  &&
ln -sv ../usr/bin/cpp lib/cpp                     &&
ln -sv gcc usr/bin/cc                             &&
install -v -dm755 usr/lib/bfd-plugins             &&
ln -sfv ../../libexec/gcc/$(gcc -dumpmachine)/10.2.0/liblto_plugin.so \
        usr/lib/bfd-plugins/                      &&
mkdir -pv usr/share/gdb/auto-load/usr/lib         &&
mv -v usr/lib/*gdb.py usr/share/gdb/auto-load/usr/lib &&
case $(uname -m) in
	aarch64)  ;;&
	x86_64) mv -v   lib64/* lib/ 
		rm -rfv lib64
		ln -sv  lib   lib64
		;;
esac &&
makepkg -l y -c n ${PKGS}/${PACKAGENAME}-${PVER}-${SUFFIX}  &&
installpkg        ${PKGS}/${PACKAGENAME}-${PVER}-${SUFFIX}  &&
cd - && cd ../..                                                    &&
printf  "${BLUEC}*** Removing unpacked package source.${NORMALC}\n" && 
rm -rf $PACKAGE &&
printf "${GREENC}*** Cleaning stage.${NORMALC}${NORMALC}\n"         && 
rm -rf ${BUILD}/* && 
case $(uname -m) in
        x86_64)  ;;&
        aarch64) export blib="lib64"
                 ;;
        armv*)   ;;&
        i686)    export blib="lib32"
                 ;;
esac &&
case $(uname -m) in
        aarch64) ;;&
        armv*)   export habi="eabihf"
        ;;
esac &&
printf "${REDC}>> Testing final system's toolchain ..${NORMALC}\n" &&
echo "int main(){}" > dummy.c            &&
cc dummy.c -v -Wl,--verbose &> dummy.log &&
readelf -l a.out | grep ': /lib'         &&
printf "${YELLOWC}      ^^ Does the above match below? ^^ ${BLUEC}\n " &&
case $(uname -m) in
	x86_64)  printf "     [Requesting program interpreter: /lib/ld-musl-x86_64.so.1]"
		;;
	aarch64) printf "     [Requesting program interpreter: /lib/ld-musl-aarch64.so.1]"
		;;
	i686)    printf "     [Requesting program interpreter: /lib/ld-musl-i386.so.1]"
		;;
	armv7*) ;;&
	armv6*)  printf "     [Requesting program interpreter: /lib/ld-musl-arm.so.1]"
	        ;;
esac && printf "\n${YELLOWC}" &&
read -p "Press [ ENTER ] for yes or [ctrl]+ c for no." &&
printf "${NORMALC}"                    &&
grep  'crt[1in].o succeeded' dummy.log &&
printf "${YELLOWC} ^^ Does the above match below? ^^ ${BLUEC}\n" &&
printf "${BLUEC}attempt to open /usr/lib/gcc/$(uname -m)-linux-musl${habi}/${PVER}/../../../Scrt1.o succeeded\n" &&
printf "attempt to open /usr/lib/gcc/$(uname -m)-linux-musl${habi}/${PVER}/../../../crti.o succeeded\n" &&
printf "attempt to open /usr/lib/gcc/$(uname -m)-linux-musl${habi}/${PVER}/../../../crtn.o succeeded\n" &&
printf "${YELLOWC}" &&
read -p "Press [ ENTER ] for yes or [ctrl]+ c for no." &&
printf "${NORMALC}"                    &&
grep -B2 '^ /usr/lib/gcc' dummy.log    &&
printf "${YELLOWC} ^^ Does the above match below? ^^ ${BLUEC}\n " &&
printf "${BLUEC}" &&
echo   "/usr/local/include " &&
echo   " /usr/include"        &&
echo   " /usr/lib/gcc/$(uname -m)-linux-musl${habi}/${PVER}/include" &&
printf "${YELLOWC}" &&
read -p "Press [ ENTER ] for yes or [ctrl]+ c for no." && printf "${NORMALC}" &&
grep 'SEARCH.*/usr/lib' dummy.log |sed 's|; |\n|g'                            &&
printf "${YELLOWC} ^^ Does the above match below? ^^ ${BLUEC}\n" &&
echo "SEARCH_DIR(\"/usr/$(uname -m)-pc-linux-musl${habi}/${blib}\")" &&
echo "SEARCH_DIR(\"/usr/local/${blib}\")"                     &&
echo "SEARCH_DIR(\"/${blib}\")"                               &&
echo "SEARCH_DIR(\"/usr/${blib}\")"                           &&
echo "SEARCH_DIR(\"/usr/$(uname -m)-pc-linux-musl${habi}/lib\")" &&
echo "SEARCH_DIR(\"/usr/local/lib\")"                            &&
echo "SEARCH_DIR(\"/lib\")"                                      &&
echo "SEARCH_DIR(\"/usr/lib\")"                                  &&
printf "${YELLOWC}" &&
read -p "Press [ ENTER ] for yes or [ctrl]+ c for no." && printf "${NORMALC}" &&
rm -v dummy.c a.out dummy.log
