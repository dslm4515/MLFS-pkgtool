# Final System: Linux Kernel
# Source: https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.12.10.tar.xz 
# This section is done in Chroot environment
#
# $BUILD = Directory to temporarily install
# $PKGS  = Directory to store built packages
# $DESCS = Directory of package descriptions
#
# $BTRUPLE = Architecture Specifier i.e. i686-linux-musl
# $PSUFFIX = Architecture and Distro of package
#
export PNAME="kernel" &&
export   VER="5.12.10"     &&
export  MJOB="-j2"     &&

case $(uname -m) in
   x86_64*)  export ARCH="x86"   ;;
   i686*)    export ARCH="x86"   ;;
   armv*)    export ARCH="arm"   ;;
   aarch64*) export ARCH="arm64" ;;
esac

# Fix fix header for missing definition of __always_inline in
# 5.12.x kernels for musl systems.
patch -Np1 -i ../patches/kernel/include-uapi-linux-swab-Fix-potentially-missing-__always_inline.patch

# Prepare for compilation by running the following command:
make mrproper ${MJ}

# Configure kernel:
make menuconfig ${MJ}

# Compile the kernel image and modules: 
make ${MJ}

# Install the modules, if the kernel configuration uses them:
make INSTALL_MOD_PATH=${BUILD} modules_install

# Install the kernel:
mkdir -pv ${BUILD}/boot
case $ARCH in
   x86)  cp -iv arch/${ARCH}/boot/bzImage   ${BUILD}/boot/vmlinuz ;;
   arm*) cp -iv arch/${ARCH}/boot/zImage    ${BUILD}/boot/ 
         cp -vr arch/${ARCH}/boot/dts/*.dtb ${BUILD}/boot/        ;;
esac

# Install the symbol file for the kernel:
case $ARCH in
   x86) cp -iv System.map ${BUILD}/boot/System.map ;;
esac

# Install the kernel configuration file .config produced by the make menuconfig:
cp -iv .config ${BUILD}/boot/config

##  Then create the initramfs image required by bootscripts
# Create a directory to hold the contents of
# the initramfs
mkdir -pv /sources/initramfs_build

cd /sources/initramfs_build
mkdir -pv bin dev etc lib proc run sbin sys usr
mkdir -pv lib/{firmware,modules,udev}
mkdir -pv etc/{modprobe.d,udev}

# Create symlinks
ln -sv lib lib64
ln -sv ../bin usr/bin

# Copy binaries
for b in cat cp dd killall kmod ln ls mkdir \
         mknod mount rm sed sh sleep umount uname
do 
  cp -va /bin/$b bin/
done
cp -va /usr/bin/basename bin/
cp -va /usr/bin/readlink bin/
ln -sv kmod bin/insmod
ln -sv kmod bin/lsmod

# Create the nodes for udev to mount on:
mknod -m 600 dev/console c 5 1
mknod -m 666 dev/null c 1 3

# Copy udev configuration
cp -v  /etc/udev/udev.conf etc/udev/
cp -rv /etc/udev/rules.d   etc/udev/
cp -rv /lib/udev/*         lib/udev/

# Set module load order, if needed
touch etc/modprobe.d/modprobe.conf 

# Copy the init script
cp -v ../files/initramfs-init sbin/init

# Copy required libraries
for l in libacl.so.1  libattr.so.1 libblkid.so.1 libcap.so.2 \
         libkmod.so.2 liblzma.so.5 libmount.so.1 libncursesw.so.6 \
         libreadline.so.8 libz.so.1
do
  cp -va /lib/$l lib/
done
cp -v /lib/ld-musl-$(uname -m).so.1 lib/

# Copy any firmware required for boot:
cp -rv /lib/firmware/* lib/firmware/

# Copy any kernel modules:
cp -rv ${BUILD}/lib/modules/* lib/modules/

# Now create the initramfs image. Do not change directories
find . | cpio -o -H newc | gzip -9  > ${BUILD}/boot/initrd.img

cd ${BUILD} && mkdir -v ${BUILD}/install          &&
cp -v $DESCS/${PNAME} ${BUILD}/install/slack-desc &&
makepkg -l y -c n $PKGS/${PNAME}-${VER}-$PSUFFIX  &&
rm -rf ${BUILD}/* && installpkg $PKGS/${PNAME}-${VER}-$PSUFFIX
