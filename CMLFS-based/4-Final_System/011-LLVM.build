# Final Stage2 clang (with compiler-rt,libcxx,libcxxabi,libunwind,lld)
# Build under chroot
#
# NOTE: Reuse llvm-project source tree from before
# NOTE: Using CC=clang instead of CC=${TARGET_TUPLE}-clang

export PNAME="llvm-project"  &&
export   VER="17.0.5" &&
export  MJOB="-j2"

# Restore default dynamic linker/loader path to /lib
patch -Np1 -i ../patches/llvm-cmlfs/modify-test-dynamic-loader.restore.patch
patch -Np1 -i ../patches/llvm-cmlfs/modify-toolchain-dynamic-loader.restore.patch

# stage1 clang cannot find zstd headers
ln -sv /usr/include/zstd.h  /llvmtools/include/

# Build will fail as some shared objects require -fPIC
export CFLAGS="-fPIC "
export CXXFLAGS=$CFLAGS

# Set the compiler and linker flags...
export  CT="-DCMAKE_C_COMPILER=clang "
export CT+="-DCMAKE_CXX_COMPILER=clang++ "
export CT+="-DCMAKE_AR=/llvmtools/bin/llvm-ar "
export CT+="-DCMAKE_NM=/llvmtools/bin/llvm-nm "
export CT+="-DCMAKE_RANLIB=/llvmtools/bin/llvm-ranlib "
export CT+="-DCLANG_DEFAULT_LINKER=/usr/bin/ld.lld "

# Set the tuples & build target ...
export  CTG="-DLLVM_DEFAULT_TARGET_TRIPLE=${TUPLE} "
export CTG+="-DLLVM_HOST_TRIPLE=${TUPLE} "
export CTG+="-DCOMPILER_RT_DEFAULT_TARGET_TRIPLE=${TUPLE} "
export CTG+="-DLLVM_TARGET_ARCH=host "
export CTG+="-DLLVM_TARGETS_TO_BUILD=Native;host;AMDGPU;BPF "

# Set the paths ...
export  CP="-DCMAKE_INSTALL_PREFIX=/usr "
export CP+="-DCMAKE_INSTALL_LIBDIR=lib "

# Set options for compiler-rt
# + avoid all the optional runtimes:
#export  CRT="-DCOMPILER_RT_BUILD_SANITIZERS=OFF "
#export CRT+="-DCOMPILER_RT_BUILD_XRAY=OFF "
#export CRT+="-DCOMPILER_RT_BUILD_LIBFUZZER=OFF "
#export CRT+="-DCOMPILER_RT_BUILD_PROFILE=OFF "
#export CRT+="-DCOMPILER_RT_BUILD_MEMPROF=OFF "
# + Avoid need for libexecinfo:
export  CRT="-DCOMPILER_RT_BUILD_GWP_ASAN=OFF "
export CRT+="-DCOMPILER_RT_USE_LLVM_UNWINDER=ON "
export CRT+="-DCOMPILER_RT_USE_BUILTINS_LIBRARY=ON "
# + Set compiler_rt to use libcxx
export CRT+="-DCOMPILER_RT_CXX_LIBRARY=libcxx "

# Set options for clang
# + Set the standard C++ library that clang will use to LLVM's libc++
# + Set compiler-rt as default runtime
export  CLG="-DCLANG_DEFAULT_CXX_STDLIB=libc++ "
export CLG+="-DCLANG_DEFAULT_RTLIB=compiler-rt "
export CLG+="-DCLANG_DEFAULT_UNWINDLIB=libunwind "
export CLG+="-DCLANG_DEFAULT_CXX_STDLIB=libc++ "

# Set options for libc++
export  CLCPP="-DLIBCXX_HAS_MUSL_LIBC=ON "
export CLCPP+="-DLIBCXX_ENABLE_LOCALIZATION=ON "
export CLCPP+="-DLIBCXX_ENABLE_NEW_DELETE_DEFINITIONS=ON "
export CLCPP+="-DLIBCXX_CXX_ABI=libcxxabi "
export CLCPP+="-DLIBCXX_USE_COMPILER_RT=ON "
export CLCPP+="-DLIBCXX_ENABLE_STATIC_ABI_LIBRARY=ON "
export CLCPP+="-DLIBCXX_ENABLE_ASSERTIONS=ON "

# Set options fo libc++abi
export  CLCPPA="-DLIBCXXABI_USE_LLVM_UNWINDER=ON "
export CLCPPA+="-DLIBCXXABI_ENABLE_STATIC_UNWINDER=ON "
export CLCPPA+="-DLIBCXXABI_USE_COMPILER_RT=ON "

# Set options for libunwind
export  CUW="-DLIBUNWIND_INSTALL_HEADERS=ON "
export CUW+="-DLIBUNWIND_USE_COMPILER_RT=ON "

# Set LLVM options
# + Enable Exception handling and Runtime Type Info
export  CLLVM="-DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON "
export CLLVM+="-DLLVM_ENABLE_ZLIB=ON "
export CLLVM+="-DZLIB_INCLUDE_DIR=/usr/include "
export CLLVM+="-DZLIB_LIBRARY_RELEASE=/usr/lib/libz.so "
export CLLVM+="-DLLVM_INSTALL_UTILS=ON "
export CLLVM+="-DLLVM_BUILD_LLVM_DYLIB=ON "
export CLLVM+="-DLLVM_LINK_LLVM_DYLIB=ON "
export CLLVM+="-DENABLE_LINKER_BUILD_ID=ON "
export CLLVM+="-DLLVM_ENABLE_PER_TARGET_RUNTIME_DIR=ON "
export CLLVM+="-DLLVM_ENABLE_LIBCXX=ON "
export CLLVM+="-DLLVM_ENABLE_LLD=ON "
export CLLVM+="-DLLVM_ENABLE_ZSTD=ON "
export CLLVM+="-DLLVM_ENABLE_TERMINFO=ON "

# Turn off LLVM options
# + Turn off features host may have
export  COFF="-DLLVM_ENABLE_LIBEDIT=OFF "
export COFF+="-DLLVM_ENABLE_LIBXML2=OFF "
export COFF+="-DLLVM_ENABLE_LIBPFM=OFF "

# Remove more tests & docs that breaks build
export  MOFF="-DCLANG_INCLUDE_TESTS=OFF "
export MOFF+="-DLLVM_ENABLE_OCAMLDOC=OFF "
export MOFF+="-DLLVM_INCLUDE_BENCHMARKS=OFF "
export MOFF+="-DLLVM_INCLUDE_DOCS=OFF "
export MOFF+="-DLLVM_INCLUDE_EXAMPLES=OFF "
export MOFF+="-DLLVM_INCLUDE_TESTS=OFF "

cmake -B build -G Ninja -Wno-dev -S llvm \
      -DCMAKE_BUILD_TYPE=Release \
      -DLLVM_ENABLE_PROJECTS="lld;clang" \
      -DLLVM_ENABLE_RUNTIMES="compiler-rt;libunwind;libcxx;libcxxabi" \
      -DCLANG_VENDOR="CMLFS 4.0.0" -DLLD_VENDOR="CMLFS 4.0.0" \
      -DDEFAULT_SYSROOT="/usr" \
      $CT $CTG $CP $CRT $CLG $CLCPP $CLCPPA $CUW $CLLVM $COFF $MOFF 

# compile
ninja -C build

# If build fails to compile, use below to see what component failed.
# ninja -C build $TARGET
# Build target break down (still unsure of order):
#
# $TARGET ......... COUNT ........ STATUS
# llvm-headers ...... 202 ......... PASS
# llvm-tblgen ........ 68 ......... PASS
# llvm-lib ......... 1812 ......... PASS
# lld ............... 126 ......... PASS
# clang ............ 1181 ......... PASS
# libclang ........... 31 ......... PASS
# compiler-rt ........ 63+ ........ PASS *build after cxx as libc++experimental was built 
# unwind .............. 9 ......... PASS
# builtins ........................ PASS (already built)
# cxxabi ............. 41 ......... PASS
# cxx ............... 103 ......... PASS
# <remaining> ....... 530 ......... PASS

# Install
DESTDIR=$BUILD cmake --install build --strip

# Fix the dynamic linker for the executables:
for b in bugpoint c-index-test clang-17 count diagtool dsymutil FileCheck \
         llc lld lli lli-child-target not obj2yaml opt sancov sanstats \
         split-file UnicodeNameMappingGenerator verify-uselistorder yaml2obj \
         yaml-bench amdgpu-arch nvptx-arch
do
  setDL $BUILD/usr/bin/$b
done

for b in check extdef-mapping format linker-wrapper \
         offload-bundler offload-packager refactor \
         rename repl scan-deps tblgen 
do
  setDL $BUILD/usr/bin/clang-$b
done

for b in ar as bcanalyzer cat cfi-verify config cov c-test cvtres cxxdump \
         cxxfilt cxxmap debuginfod debuginfod-find diff dis dwarfdump \
         dwarfutil dwp exegesis extract gsymutil ifs jitlink jitlink-executor \
         libtool-darwin link lipo lto lto2 mc mca ml modextract mt nm objcopy \
         objdump opt-report pdbutil PerfectShuffle profdata profgen rc readobj \
         reduce remark-size-diff rtdyld sim size split stress strings \
         symbolizer tapi-diff tblgen tli-checker undname xray remarkutil debuginfo-analyzer
do
  setDL $BUILD/usr/bin/llvm-$b
done

# Add a compaitbility link for 32-bit x86 builtins
case $(uname -m) in
     i686) ln -sv i386-pc-linux-musl \
              $BUILD/usr/lib/clang/17/lib/i686-pc-linux-musl
     ;;
esac

# Set LLD as default linker
ln -sv ld.lld $BUILD/usr/bin/ld

# Many packages use the name cc to call the C compiler. To
# satisfy those packages, create a symlink
ln -sv clang-17 $BUILD/usr/bin/cc

# Create a symlink required by the FHS for "historical" reasons
ln -sv ../bin/clang-17 $BUILD/usr/lib/cpp

# NOTE: stage2 clang loads libc shared object from llvmtools. 
# Sysroot still set to /llvmtools
# Create a clang config to set sysroot to /
cat > $BUILD/usr/bin/${TUPLE}.cfg << "EOF"
--sysroot=/
EOF
