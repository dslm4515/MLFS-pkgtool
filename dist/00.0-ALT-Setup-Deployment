# Setup Deployment

# After building CMLFS/MLFS with MLFS-pkgtools, built packages can be reused
# to build another system, instead of building all the packages again.
#
# One method would be to mount the other system's storage media under CMLFS/MLFS/LFS,
# mount the target partition and copy over the built packages. 

# As root, mount the partition the new system will be installed
# For example, /dev/sdb2
export LFS=/mnt/lfs
sudo mkdir $LFS
sudo mount -v /dev/sdb2 $LFS

# As root, create a 'payload' directory to hold packages to install
sudo mkdir -pv $LFS/sys-payload/base-pkgs

# As root, copy over built packages
sudo cp -v $BUILT-PKGS-DIR/* $LFS/sys-payload/base-pkgs/

# A root, copy md5 hash file.
# Optional: hash file can have the order of packages to install
sudo cp -v $BUILT-PKGS-DIR/base-pkgs.md5 $LFS/sys-payload/

# As root, copy over any initramfs images, kernels
sudo cp -v $BUILT-initramfs-kernels-DIR/* $LFS/sys-payload/

# Copy script & common packakes 

# The final system directory should look similar to this:
$LFS/sys-payload/
├── base-pkgs
│   ├── Jinja2-3.1.2-x86_64-cmlfs400.txz
│   ├── MarkupSafe-2.1.3-x86_64-cmlfs400.txz
│   └── ... (the rest of builtpackages)
├── base-pkgs.md5
├── base-sysrootdir-1.0.0-noarch-lfs.txz
├── init-pkgdb 
└── initrd.img

# Create the package database as root
sudo bash ${LFS}/sys-payload/init-pkgdb ${LFS}

# Install the base root hierarchy
sudo spkg --root=$LFS $LFS/sys-payload/base-sysrootdir-1.0.0-noarch-lfs.txz

# Create directories and nodes for virtual kernel file systems:
sudo mkdir -pv $LFS/{dev,proc,sys,run}
sudo mknod -m 600 $LFS/dev/console c 5 1
sudo mknod -m 666 $LFS/dev/null c 1 3

# Install the packages
cd $LFS/sys-payload/base-pkgs
for p in $(grep -v '^#' ../base-pkgs.md5  | awk '{print $2}')
do
  sudo spkg --root=$LFS ${p}
done

# To satisfy utilities that expect the presence
# of /etc/mtab, create the following symbolic lin:
sudo ln -sv /proc/self/mounts $LFS/etc/mtab

# In order for user root to be able to login 
# and for the name “root” to be recognized, 
# there must be relevant entries in the 
# /etc/passwd and /etc/group files.
cat > /tmp/passwd << "EOF"
root:x:0:0:root:/root:/bin/bash
daemon:x:6:6:Daemon User:/dev/null:/bin/false
messagebus:x:18:18:D-Bus Message Daemon User:/var/run/dbus:/bin/false
nobody:x:99:99:Unprivileged User:/dev/null:/bin/false
EOF
sudo mv /tmp/passwd $LFS/etc/passwd

cat > /tmp/group << "EOF"
root:x:0:
sys:x:2:
kmem:x:3:
tape:x:4:
tty:x:5:
daemon:x:6:
floppy:x:7:
disk:x:8:
lp:x:9:
dialout:x:10:
audio:x:11:
video:x:12:
utmp:x:13:
usb:x:14:
cdrom:x:15:
adm:x:16:
messagebus:x:18:
input:x:24:
mail:x:34:
nogroup:x:99:
users:x:999:
EOF
sudo mv /tmp/group $LFS/etc/group

# Enter chroot -- 1st mount virtual filesystems
sudo mount -v --bind /dev $LFS/dev
sudo mount -vt devpts devpts $LFS/dev/pts -o gid=5,mode=620
sudo mount -vt proc proc $LFS/proc
sudo mount -vt sysfs sysfs $LFS/sys
sudo mount -vt tmpfs tmpfs $LFS/run
if [ -h $CMLFS/dev/shm ]; then
  sudo mkdir -pv $LFS/$(readlink $LFS/dev/shm)
fi

# Enter chroot
sudo chroot "$LFS" /usr/bin/env -i \
     HOME=/root TERM="$TERM" \
     PS1='(mlfs chroot) \u:\w\n\$ ' \ 
     PATH=/bin:/usr/bin:/sbin:/usr/sbin \
     /usr/bin/bash --login +h

# The login, agetty, and init programs (and others) 
# use a number of log files to record information 
# such as who was logged into the system and when. 
# However, these programs will not write to the 
# log files if they do not already exist. 
# Initialize the log files and give them proper 
# permissions:
for l in btmp lastlog faillog wtmp
do
 touch /var/log/$l
done
chgrp -v utmp /var/log/lastlog
chmod -v 664  /var/log/lastlog
chmod -v 600  /var/log/btmp

# Create a basic /etc/hosts file 
cat > /etc/hosts << EOF
127.0.0.1  localhost $(hostname)
::1        localhost
EOF

# Set Time Zone
# Use tzselect to determine <xxx>
ln -sv /usr/share/zoneinfo/<xxx> /etc/localtime

# make sure dynamic loader is configured
cp -v /etc/ld-musl-*.d/default /etc/ld-musl-x86_64.path

# Make sure safeboot is available
cp -v  /etc/s6/base/bin/init       /usr/sbin/init-safemode
sed -i 's/default/safemode/g'      /usr/sbin/init-safemode

# Continue to 04-Network-Config
